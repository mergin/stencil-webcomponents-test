/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface MyBackdrop {}
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyComponent2 {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyEmbeddedComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyModal {
    'content': string;
    'title': string;
  }
  interface MyModalBundle {
    'close': () => Promise<void>;
    'content': string;
    'open': () => Promise<void>;
    'title': string;
  }
}

declare namespace LocalJSX {
  interface MyBackdrop extends JSXBase.HTMLAttributes {}
  interface MyComponent extends JSXBase.HTMLAttributes {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface MyComponent2 extends JSXBase.HTMLAttributes {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface MyEmbeddedComponent extends JSXBase.HTMLAttributes {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
  interface MyModal extends JSXBase.HTMLAttributes {
    'content'?: string;
    'onOnClose'?: (event: CustomEvent<any>) => void;
    'title'?: string;
  }
  interface MyModalBundle extends JSXBase.HTMLAttributes {
    'content'?: string;
    'title'?: string;
  }

  interface IntrinsicElements {
    'my-backdrop': MyBackdrop;
    'my-component': MyComponent;
    'my-component-2': MyComponent2;
    'my-embedded-component': MyEmbeddedComponent;
    'my-modal': MyModal;
    'my-modal-bundle': MyModalBundle;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


declare global {



  interface HTMLMyBackdropElement extends Components.MyBackdrop, HTMLStencilElement {}
  var HTMLMyBackdropElement: {
    prototype: HTMLMyBackdropElement;
    new (): HTMLMyBackdropElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLMyComponent2Element extends Components.MyComponent2, HTMLStencilElement {}
  var HTMLMyComponent2Element: {
    prototype: HTMLMyComponent2Element;
    new (): HTMLMyComponent2Element;
  };

  interface HTMLMyEmbeddedComponentElement extends Components.MyEmbeddedComponent, HTMLStencilElement {}
  var HTMLMyEmbeddedComponentElement: {
    prototype: HTMLMyEmbeddedComponentElement;
    new (): HTMLMyEmbeddedComponentElement;
  };

  interface HTMLMyModalElement extends Components.MyModal, HTMLStencilElement {}
  var HTMLMyModalElement: {
    prototype: HTMLMyModalElement;
    new (): HTMLMyModalElement;
  };

  interface HTMLMyModalBundleElement extends Components.MyModalBundle, HTMLStencilElement {}
  var HTMLMyModalBundleElement: {
    prototype: HTMLMyModalBundleElement;
    new (): HTMLMyModalBundleElement;
  };

  interface HTMLElementTagNameMap {
    'my-backdrop': HTMLMyBackdropElement;
    'my-component': HTMLMyComponentElement;
    'my-component-2': HTMLMyComponent2Element;
    'my-embedded-component': HTMLMyEmbeddedComponentElement;
    'my-modal': HTMLMyModalElement;
    'my-modal-bundle': HTMLMyModalBundleElement;
  }

  interface ElementTagNameMap extends HTMLElementTagNameMap {}
}

